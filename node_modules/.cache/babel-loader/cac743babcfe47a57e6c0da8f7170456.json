{"ast":null,"code":"var _jsxFileName = \"/Users/johngarrett/Documents/GitHub/react-clicky-game/src/components/ClickyGame.js\";\nimport React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Container from './Container';\nimport Footer from './Footer';\nimport Banner from './Banner';\nimport images from '../images';\n\nclass Clickygame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      score: 0,\n      highScore: 0,\n      // store the class value to assign to naMessage based on a click\n      navMsgColor: '',\n      // contains all the messages a user will need\n      navMessage: 'Click an image to get Schwifty!',\n      // contains array of images\n      allCharacters: this.shuffleArray(),\n      // track clicks\n      wasClicked: [],\n      // shake the container if an incorrect guess\n      shake: false\n    };\n    this.clickEvent = this.checkClicked.bind(this);\n  }\n\n  // shuffle images when loaded and when image is clicked\n  shuffleArray() {\n    const newArr = images.slice();\n    const shuffleArray = [];\n\n    while (newArr.length > 0) {\n      shuffleArray.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    }\n\n    return shuffleArray;\n  }\n\n  checkClicked(clickedElem) {\n    const prevState = this.state.wasClicked.slice(); // shuffle the images\n\n    const shuffled = this.shuffleArray(); // track score\n\n    let score = this.state.score;\n    let highScore = this.state.highScore; // increase the score if was correctly clicked\n\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // make new high score\n      if (score === highScore) {\n        score++;\n        highScore++;\n      } else {\n        score++;\n      } // keeps track of the wasClicked\n\n\n      prevState.push(clickedElem);\n    } // resets if user clicks wrong\n\n\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: 'incorrect',\n        navMessage: 'Incorrect! Existence is pain!',\n        allCharacters: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    } // if the user guesses correct\n\n\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: 'correct',\n      navMessage: 'Good! We like what you got!',\n      allCharacters: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n    return setTimeout(() => this.setState({\n      navMsgColor: ''\n    }), 500);\n  } // pass score to the navbar\n  // create a character component for each image\n  // tracks the image for the click event\n\n\n  render() {\n    const state = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      score: state.score,\n      highScore: state.highScore,\n      navMessage: state.navMessage,\n      navMsgColor: state.navMsgColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(Banner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(Container, {\n      shake: state.shake,\n      characters: state.allCharacters,\n      clickEvent: this.clickEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Clickygame;","map":{"version":3,"sources":["/Users/johngarrett/Documents/GitHub/react-clicky-game/src/components/ClickyGame.js"],"names":["React","Component","Navbar","Container","Footer","Banner","images","Clickygame","state","score","highScore","navMsgColor","navMessage","allCharacters","shuffleArray","wasClicked","shake","clickEvent","checkClicked","bind","newArr","slice","length","push","splice","Math","floor","random","clickedElem","prevState","shuffled","includes","setState","setTimeout","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Container from './Container';\nimport Footer from './Footer';\nimport Banner from './Banner';\nimport images from '../images';\n\n\nclass Clickygame extends Component {\n  state= {\n    score: 0,\n    highScore: 0,\n    \n    // store the class value to assign to naMessage based on a click\n    navMsgColor: '',\n\n    // contains all the messages a user will need\n    navMessage: 'Click an image to get Schwifty!',\n\n    // contains array of images\n    allCharacters: this.shuffleArray(),\n\n    // track clicks\n    wasClicked: [],\n\n    // shake the container if an incorrect guess\n    shake: false\n  };\n// access the current state\n// get random index based of the length of array left\n// bind current context to Clicked to have current state\nclickEvent = this.checkClicked.bind(this);\n\n// shuffle images when loaded and when image is clicked\nshuffleArray(){\n  const newArr = images.slice();\n\n  const shuffleArray = [];\n\n  while (newArr.length > 0) {\n    shuffleArray.push(\n      newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]\n    );\n  }\n\n  return shuffleArray;\n}\n\ncheckClicked(clickedElem) {\n  const prevState = this.state.wasClicked.slice();\n\n  // shuffle the images\n  const shuffled = this.shuffleArray();\n\n  // track score\n  let score = this.state.score;\n  let highScore =  this.state.highScore;\n\n  // increase the score if was correctly clicked\n  if (!this.state.wasClicked.includes(clickedElem)) {\n    // make new high score\n    if (score === highScore) {\n      score++;\n      highScore++;\n\n    } else{\n      score++;\n    }\n\n    // keeps track of the wasClicked\n    prevState.push(clickedElem);\n  }\n\n  // resets if user clicks wrong\n\n  if (this.state.wasClicked.includes(clickedElem)) {\n    let score = 0;\n    return this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: 'incorrect',\n      navMessage: 'Incorrect! Existence is pain!',\n      allCharacters: shuffled,\n      wasClicked: [],\n      shake: true\n    });\n  }\n\n    // if the user guesses correct\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: 'correct',\n      navMessage: 'Good! We like what you got!',\n      allCharacters: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    return setTimeout(() => this.setState({ navMsgColor: ''}), 500);\n  }\n\n  // pass score to the navbar\n  // create a character component for each image\n  // tracks the image for the click event\n  render(){\n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          navMessage={state.navMessage}\n          navMsgColor={state.navMsgColor}\n      />\n      <Banner />\n      <Container\n        shake={state.shake}\n        characters={state.allCharacters}\n        clickEvent={this.clickEvent}\n        />\n        <Footer />\n        </div>\n    );\n  }\n}\n\nexport default Clickygame;"]},"metadata":{},"sourceType":"module"}