{"version":3,"sources":["images/beth.png","images/birdperson.png","images/evilmorty.png","images/gianthead.png","images/goldenford.png","images/jerry.png","images/jessica.png","images/meeseeks.png","images/morty.png","images/mr.png","images/rick.png","images/summer.png","components/Navbar/Navbar.js","components/Character/Character.js","components/Container/Container.js","components/Footer/Footer.js","components/Banner/Banner.js","images.js","components/ClickyGame.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","react_default","a","createElement","className","navMsgColor","navMessage","score","highScore","Character","onClick","e","clickEvent","target","src","name","alt","Container","shake","characters","map","i","components_Character_Character","key","textStyle","color","fontSize","Footer","style","href","Banner","images","beth","birdperson","evilmorty","gianthead","goldenford","jerry","jessica","meeseeks","morty","mr","rick","summer","Clickygame","state","allCharacters","_this","shuffleArray","wasClicked","checkClicked","bind","Object","assertThisInitialized","newArr","slice","length","push","splice","Math","floor","random","clickedElem","_this2","this","prevState","shuffled","includes","setState","setTimeout","components_Navbar_Navbar","components_Banner_Banner","components_Container_Container","components_Footer_Footer","Component","ReactDOM","render","ClickyGame","document","getElementById"],"mappings":"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","file":"static/js/main.7f1a120c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/beth.4d5e65a0.png\";","module.exports = __webpack_public_path__ + \"static/media/birdperson.612ba8d4.png\";","module.exports = __webpack_public_path__ + \"static/media/evilmorty.0657e1f4.png\";","module.exports = __webpack_public_path__ + \"static/media/gianthead.978b3847.png\";","module.exports = __webpack_public_path__ + \"static/media/goldenford.3774b39d.png\";","module.exports = __webpack_public_path__ + \"static/media/jerry.af8e8a84.png\";","module.exports = __webpack_public_path__ + \"static/media/jessica.a9644830.png\";","module.exports = __webpack_public_path__ + \"static/media/meeseeks.9667b7ee.png\";","module.exports = __webpack_public_path__ + \"static/media/morty.244deeda.png\";","module.exports = __webpack_public_path__ + \"static/media/mr.d61b2d5b.png\";","module.exports = __webpack_public_path__ + \"static/media/rick.06b65841.png\";","module.exports = __webpack_public_path__ + \"static/media/summer.afdbb7bf.png\";","import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = props => (\r\n  <div className=\"navbar \">\r\n    <div>Clicky Game</div>\r\n    <div className={props.navMsgColor}>{props.navMessage}</div>\r\n    <div>\r\n      Score: {props.score} <span className=\"pipe\">|</span> High Score:{\" \"}\r\n      {props.highScore}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./Character.css\";\r\n\r\n// the onClick function is defined as a callback so that the clicked elements value\r\n// can be passed to props.clickEvent to check if the image has been clicked or not\r\nconst Character = props => (\r\n  <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\r\n    <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\r\n  </div>\r\n);\r\n\r\nexport default Character;\r\n","import React from \"react\";\r\nimport \"./Container.css\";\r\nimport Character from \"../Character\";\r\n\r\n// main container for each Character component\r\n// loops through each index in props.characters, which contains an array of character images\r\n// to create a new Character component for each image\r\n// attaches the passed down clickEvent function to each Character component\r\nconst Container = props => (\r\n  // loops through\r\n  <div\r\n    className={\r\n      props.shake\r\n        ? \"container d-flex flex-wrap justify-content-center shake\"\r\n        : \"container d-flex flex-wrap justify-content-center\"\r\n    }\r\n  >\r\n    {props.characters.map((a, i) => (\r\n      <Character name={a} key={i} clickEvent={props.clickEvent} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst textStyle = {\r\n  color: 'teal',\r\n  fontSize: '26px'\r\n}\r\nconst Footer = () => (\r\n  <div className=\"footer text-center\">\r\n    <a style={textStyle} href=\"https://github.com/JHGarrett\" target=\"_blank\">\r\n      @John Garrett\r\n    </a>\r\n  </div>\r\n);\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./Banner.css\";\r\n\r\nconst Banner = () => (\r\n  <div className=\"banner text-center d-flex align-items-center justify-content-center\">\r\n    <p className=\"m-0\">\r\n    Show me what you got!\r\n\r\n      Click on an image to earn points, Guess wrong and King Jellybean will get you!\r\n    </p>\r\n  </div>\r\n);\r\nexport default Banner;\r\n","import beth from \"./images/beth.png\";\r\nimport birdperson from \"./images/birdperson.png\";\r\nimport evilmorty from \"./images/evilmorty.png\";\r\nimport gianthead from \"./images/gianthead.png\";\r\nimport goldenford from \"./images/goldenford.png\";\r\nimport jerry from \"./images/jerry.png\";\r\nimport jessica from \"./images/jessica.png\";\r\nimport meeseeks from \"./images/meeseeks.png\";\r\nimport morty from \"./images/morty.png\";\r\nimport mr from \"./images/mr.png\";\r\nimport rick from \"./images/rick.png\";\r\nimport summer from \"./images/summer.png\";\r\n\r\nconst images = [\r\n  beth,\r\n  birdperson,\r\n  evilmorty,\r\n  gianthead,\r\n  goldenford,\r\n  jerry,\r\n  jessica,\r\n  meeseeks,\r\n  morty,\r\n  mr,\r\n  rick,\r\n  summer\r\n];\r\n\r\nexport default images;\r\n","import React, { Component } from 'react';\r\nimport Navbar from './Navbar';\r\nimport Container from './Container';\r\nimport Footer from './Footer';\r\nimport Banner from './Banner';\r\nimport images from '../images';\r\n\r\n\r\nclass Clickygame extends Component {\r\n  state= {\r\n    score: 0,\r\n    highScore: 0,\r\n    \r\n    // store the class value to assign to naMessage based on a click\r\n    navMsgColor: '',\r\n\r\n    // contains all the messages a user will need\r\n    navMessage: 'Click an image to get Schwifty!',\r\n\r\n    // contains array of images\r\n    allCharacters: this.shuffleArray(),\r\n\r\n    // track clicks\r\n    wasClicked: [],\r\n\r\n    // shake the container if an incorrect guess\r\n    shake: false\r\n  };\r\n// access the current state\r\n// get random index based of the length of array left\r\n// bind current context to Clicked to have current state\r\nclickEvent = this.checkClicked.bind(this);\r\n\r\n// shuffle images when loaded and when image is clicked\r\nshuffleArray(){\r\n  const newArr = images.slice();\r\n\r\n  const shuffleArray = [];\r\n\r\n  while (newArr.length > 0) {\r\n    shuffleArray.push(\r\n      newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]\r\n    );\r\n  }\r\n\r\n  return shuffleArray;\r\n}\r\n\r\ncheckClicked(clickedElem) {\r\n  const prevState = this.state.wasClicked.slice();\r\n\r\n  // shuffle the images\r\n  const shuffled = this.shuffleArray();\r\n\r\n  // track score\r\n  let score = this.state.score;\r\n  let highScore =  this.state.highScore;\r\n\r\n  // increase the score if was correctly clicked\r\n  if (!this.state.wasClicked.includes(clickedElem)) {\r\n    // make new high score\r\n    if (score === highScore) {\r\n      score++;\r\n      highScore++;\r\n\r\n    } else{\r\n      score++;\r\n    }\r\n\r\n    // keeps track of the wasClicked\r\n    prevState.push(clickedElem);\r\n  }\r\n\r\n  // resets if user clicks wrong\r\n\r\n  if (this.state.wasClicked.includes(clickedElem)) {\r\n    let score = 0;\r\n    return this.setState({\r\n      score: score,\r\n      highScore: highScore,\r\n      navMsgColor: 'incorrect',\r\n      navMessage: 'Incorrect! Existence is pain!',\r\n      allCharacters: shuffled,\r\n      wasClicked: [],\r\n      shake: true\r\n    });\r\n  }\r\n\r\n    // if the user guesses correct\r\n    this.setState({\r\n      score: score,\r\n      highScore: highScore,\r\n      navMsgColor: 'correct',\r\n      navMessage: 'Good! We like what you got!',\r\n      allCharacters: shuffled,\r\n      wasClicked: prevState,\r\n      shake: false\r\n    });\r\n\r\n    return setTimeout(() => this.setState({ navMsgColor: ''}), 500);\r\n  }\r\n\r\n  // pass score to the navbar\r\n  // create a character component for each image\r\n  // tracks the image for the click event\r\n  render(){\r\n    const state = this.state;\r\n    return (\r\n      <div>\r\n        <Navbar\r\n          score={state.score}\r\n          highScore={state.highScore}\r\n          navMessage={state.navMessage}\r\n          navMsgColor={state.navMsgColor}\r\n      />\r\n      <Banner />\r\n      <Container\r\n        shake={state.shake}\r\n        characters={state.allCharacters}\r\n        clickEvent={this.clickEvent}\r\n        />\r\n        <Footer />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Clickygame;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ClickyGame from \"./components/ClickyGame\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<ClickyGame />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}